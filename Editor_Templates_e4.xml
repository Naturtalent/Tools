<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="e4" deleted="false" description="der momentan selektierte Typ ueber den SelectionService injezieren " enabled="true" name="Inject SelectionService">@Inject
public void handleSelection(@Named(IServiceConstants.ACTIVE_SELECTION) @Optional ${type} ${name})
{
	
}</template><template autoinsert="true" context="e4" deleted="false" description="einen Logger erzeugen" enabled="true" name="Logger">private Log log = LogFactory.getLog(this.getClass());</template><template autoinsert="true" context="e4" deleted="false" description="Checked Resource auf Project, Folder, File" enabled="true" name="ResourceProjectFolder">if(iResource != null &amp;&amp; (iResource.getType() &amp; (IResource.FOLDER) | (IResource.PROJECT)) != 0)
{
}</template><template autoinsert="true" context="e4" deleted="false" description="den ApplicationContext ermitteln" enabled="true" name="GetApplicationContecxt">MApplication currentApplication = E4Workbench.getServiceContext().get(IWorkbench.class).getApplication();</template><template autoinsert="true" context="e4" deleted="false" description="eine Part ermitteln" enabled="true" name="findPart">MApplication currentApplication = E4Workbench.getServiceContext().get(IWorkbench.class).getApplication();
EPartService partService = currentApplication.getContext().get(EPartService.class);
MPart part = partService.findPart(${partID});</template><template autoinsert="true" context="e4" deleted="false" description="einen partbezogenen SelectionService ermtteln" enabled="true" name="findSelectionService">MApplication currentApplication = E4Workbench.getServiceContext().get(IWorkbench.class).getApplication();
EPartService partService = currentApplication.getContext().get(EPartService.class);
MPart part = partService.findPart(${partID});
					
ESelectionService selectionService = part.getContext().get(ESelectionService.class);
Object selObject = selectionService.getSelection();</template><template autoinsert="true" context="e4" deleted="false" description="URL zu einem Pfad im PlugIn" enabled="true" name="pluginURL">Bundle bundle = FrameworkUtil.getBundle(this.getClass());
BundleContext bundleContext = bundle.getBundleContext();
URL url = FileLocator.find(bundleContext.getBundle(),new Path(${path}), null);
try
{
	url = FileLocator.resolve(url);
}
catch (IOException e)
{
	e.printStackTrace();
}
</template><template autoinsert="true" context="e4" deleted="false" description="IProject ermitteln" enabled="true" name="getIProject">IProject iProject = ResourcesPlugin.getWorkspace().getRoot().getProject(${projectName});
if(iProject.exists())
{
}</template><template autoinsert="true" context="e4" deleted="false" description="den EventBroker ermitteln" enabled="true" name="findEventBroker">MApplication currentApplication = E4Workbench.getServiceContext().get(IWorkbench.class).getApplication();
IEventBroker eventBroker = currentApplication.getContext().get(IEventBroker.class);</template><template autoinsert="true" context="e4" deleted="false" description="EObject im Composite anzeigen (View, Dialog, Wizard)" enabled="true" name="viewEObject">/**
 * Create contents of the wizard.
 * @param parent
 */
public void createControl(Composite parent)
{
	Composite container = new Composite(parent, SWT.NULL);
	setControl(container);
	container.setLayout(new GridLayout(2, false));
			
	try
	{		
		ECPSWTViewRenderer.INSTANCE.render(container, (EObject) ${eObject});
	} catch (ECPRendererException e1)
	{
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}

	// oder
	try
	{		
		ViewModelContext vmc = ViewModelContextFactory.INSTANCE.createViewModelContext(
					ViewProviderHelper.getView((EObject) ${eObject}, null),
					(EObject) ${eObject}, new DefaultReferenceService());			
		ECPSWTViewRenderer.INSTANCE.render(container,vmc);

	} catch (ECPRendererException e1)
	{
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}


}</template><template autoinsert="true" context="e4" deleted="false" description="Rueckgabe des in dem IProject persistent gespeicherten  Namen" enabled="true" name="getIProjectName">name = iProject.getPersistentProperty(INtProject.projectNameQualifiedName);</template><template autoinsert="true" context="e4" deleted="false" description="Erweitertes detailiertes MessageDialog" enabled="true" name="MessageDialogDetail">MessageDialog msgDialog = new MessageDialog(shell,
						Messages.PastePassword_LoginLabel, null,
						Messages.bind(Messages.PastePassword_InfoClipboard,loginData.getApplication()),
						MessageDialog.INFORMATION, new String[]
							{ Messages.PastePassword_Cancel }, 0){
					
								@Override
								protected void buttonPressed(int buttonId)
								{
									// Dialog abbrechen, Clipboard loeschen, Dialog schliessen
									copyInClipboard(clipBoard, null);
									super.buttonPressed(buttonId);
									msgDialog = null;
								}								
							};
							
				
				msgDialog.setBlockOnOpen(false); // Dialogverhalten auf sofortiges Schlie√üen einstellen 
				msgDialog.open();</template><template autoinsert="true" context="e4" deleted="false" description="Run Synchron" enabled="true" name="SynchronExec">				Display.getDefault().syncExec(new Runnable()
				{					
					@Override
					public void run()
					{						
						copyInClipboard(clipBoard, null);	
						
						// Infodialog zwangsweise schliessen falls nicht schon geschlossen   
						if(msgDialog != null)
							msgDialog.getShell().close();
					}
				});				</template><template autoinsert="true" context="e4" deleted="false" description="ein neues EMF Object erzeugen" enabled="true" name="CreateEMFObject">EClass loginClass = LoginPackage.eINSTANCE.getLoginData();
				LoginData loginData = (LoginData) EcoreUtil.create(loginClass);</template><template autoinsert="true" context="e4" deleted="false" description="Attribut via SetCommand in einem EMFModel aendern" enabled="true" name="SetCommand">				// der neue Wert
				String value = "neues Password";
				
				// Model 'LoginData'
				EClass eClass = loginData.eClass();
				EList&lt;EStructuralFeature&gt;features = eClass.getEStructuralFeatures();
				for(EStructuralFeature feature : features)
				{
					// Attributname ist "password"
					if(StringUtils.equals(feature.getName(),"password"))
					{
						EditingDomain editingDomain = AdapterFactoryEditingDomain.getEditingDomainFor(LoginUtils.getLoginProject());
						EMFStoreBasicCommandStack commandStack = (EMFStoreBasicCommandStack) editingDomain.getCommandStack();
						
						SetCommand setCommand = new SetCommand(editingDomain, loginData, feature, value); 				
						editingDomain.getCommandStack().execute(setCommand);

						break;
					}					
				}</template><template autoinsert="true" context="e4" deleted="false" description="ein Brokerevent ueber Injection abfragen" enabled="true" name="InjectBrokerEvent">	@Inject
	@Optional
	public void handleModelChangedEvent(@UIEventTopic(ExportDestinationComposite.EXPORTDESTINATION_EVENT) String exportPath)
	{
		System.out.println(exportPath);
	}</template><template autoinsert="true" context="e4" deleted="false" description="In der ToolBar definierte Action ermitten und ausfhren" enabled="true" name="findAndExecuteToolBarAction">	MPart mPart = partService.findPart(NTPROJECT_VIEW_ID);
	List&lt;MToolBarElement&gt; items = modelService.findElements(mPart, NtProjectView.SAVE_TOOLBAR_ID, MToolBarElement.class,null, EModelService.IN_PART);
	MToolBarElement toolItem = items.get(0);
	if (toolItem instanceof MContribution)
		{
			MContribution directTool = (MContribution) toolItem;
			Object obj = directTool.getObject();
			if (obj instanceof SaveAction)
			{
				SaveAction saveAction = (SaveAction) obj;
				saveAction.execute(partService,modelService, mPart);
			}
		}
</template><template autoinsert="true" context="e4" deleted="false" description="Ein in der Toolbar definiertes ToolItem ermitteln" enabled="true" name="findToolBarItem">	List&lt;MToolItem&gt; items = modelService.findElements(part, NtProjectView.SAVE_TOOLBAR_ID, MToolItem.class,null, EModelService.IN_PART);
	MToolItem item = items.get(0);
	item.setEnabled(false);</template><template autoinsert="true" context="e4" deleted="false" description="Part Context ermitteln und einen bezugnehmenden Dialog erzeugen" enabled="true" name="PartContext">MApplication currentApplication = E4Workbench.getServiceContext().get(IWorkbench.class).getApplication();
		EPartService partService = currentApplication.getContext().get(EPartService.class);

		// Part auf dessen Context der Dialog erzeugt werden soll
		MPart part = partService.findPart(ArchivView.ARCHIVVIEW_ID);			
		partService.activate(part);		
		IEclipseContext context = part.getContext();
		
		// Dialog erzeugen
		ArchivActionDialog actionDialog = ContextInjectionFactory.make(ArchivActionDialog.class, context);		

		// Context des ursprunglich aktivierten Fensters speichern
		IEclipseContext activeWindowContext = application.getContext().getActiveChild();

		if(actionDialog.open() == ArchivActionDialog.OK)
		{
		}

		// urspruenglichen part 'NtProjectView.NTPROJECT_VIEW_ID' wieder aktivieren 
		activeWindowContext.activate();
		MPart currentActivePart = partService.findPart(NtProjectView.NTPROJECT_VIEW_ID);
		partService.activate(currentActivePart);</template><template autoinsert="true" context="e4" deleted="false" description="Eine Klasse mit ContextInjection Verhalten erzeugen" enabled="true" name="ContextInjectionFectory">IEclipseContext context;
Object newClass = ContextInjectionFactory.make(${classname}.class, context);</template><template autoinsert="true" context="e4" deleted="false" description="ein EObject kopieren" enabled="true" name="copyEMFObject">EObject copyObject = EcoreUtil.copy(eObject);</template><template autoinsert="true" context="e4" deleted="false" description="eine Stringaufzaehlung" enabled="true" name="Enum String">	private static String [] extensions = {"odt","odg","ods"};
	private static enum FileExtension
	{
		TextFile,
		DrawFile,
		CalcFile;
				
		public static String getExtension(FileExtension fileExtension)
		{
			String ext ="";
			switch (fileExtension)
				{
					case TextFile:
						return extensions[0];
						
					case DrawFile:
						return extensions[1];

					case CalcFile:
						return extensions[2];
				}
			return ext;
		}
	}
	</template><template autoinsert="true" context="e4" deleted="false" description="Beispiel EMF AddCommand " enabled="true" name="AddCommand">// modulglobal erforderlich fuer Commands und 'undo' - Mechanismus
EObject container = OfficeUtils.getReferenzClass(FooterPreferences.TELEKOM_REFERENZCLASS);				
EditingDomain domain = AdapterFactoryEditingDomain.getEditingDomainFor(container);				
EReference eReference = AddressPackage.eINSTANCE.getReferenzenClass_ReferenzClassReferenzen();

// ein neues  EMFObject erzeugen
EClass referenceGroupClass = AddressPackage.eINSTANCE.getReferenzGruppe();
ReferenzGruppe referenceGroup = (ReferenzGruppe) EcoreUtil.create(referenceGroupClass);	

// neues Object via AddCommand dem Modell hinzufuegen
// domain - hier wird Command ausgefuehrt
// container - das Parentobject
// das Feature (in diesem Fall eine Referenz) 
// das neue Object
Command addCommand = AddCommand.create(domain, container , eReference, referenceGroup);
domain.getCommandStack().execute(addCommand);

</template><template autoinsert="true" context="e4" deleted="false" description="alle Commands im EditingDomain zuruecknehmen" enabled="true" name="EMF undo">while(domain.getCommandStack().canUndo())
	domain.getCommandStack().undo();</template><template autoinsert="true" context="e4" deleted="false" description="die Spalte 'Validation Status' verstecken" enabled="true" name="EMF Table NoValidationColumn">import javax.inject.Inject;

import org.eclipse.emf.ecp.view.spi.context.ViewModelContext;
import org.eclipse.emf.ecp.view.spi.table.model.VTableControl;
import org.eclipse.emf.ecp.view.spi.table.swt.TableControlSWTRenderer;
import org.eclipse.emf.ecp.view.spi.util.swt.ImageRegistryService;
import org.eclipse.emf.ecp.view.template.model.VTViewTemplateProvider;
import org.eclipse.emf.ecp.view.template.style.tableValidation.model.VTTableValidationStyleProperty;
import org.eclipse.emfforms.spi.common.report.ReportService;
import org.eclipse.emfforms.spi.core.services.databinding.EMFFormsDatabinding;
import org.eclipse.emfforms.spi.core.services.databinding.emf.EMFFormsDatabindingEMF;
import org.eclipse.emfforms.spi.core.services.editsupport.EMFFormsEditSupport;
import org.eclipse.emfforms.spi.core.services.label.EMFFormsLabelProvider;

public class FootNotesTableControlRenderer extends TableControlSWTRenderer
{
	@Inject
	public FootNotesTableControlRenderer(VTableControl vElement,
			ViewModelContext viewContext, ReportService reportService,
			EMFFormsDatabinding emfFormsDatabinding,
			EMFFormsLabelProvider emfFormsLabelProvider,
			VTViewTemplateProvider vtViewTemplateProvider,
			ImageRegistryService imageRegistryService,
			EMFFormsEditSupport emfFormsEditSupport)
	{
		super(vElement, viewContext, reportService, (EMFFormsDatabindingEMF) emfFormsDatabinding,
				emfFormsLabelProvider, vtViewTemplateProvider, imageRegistryService,
				emfFormsEditSupport);
		
		
	}

	/*
	 * Validation Spalte unsichtbar machen
	 * 
	 * @see org.eclipse.emf.ecp.view.spi.table.swt.TableControlSWTRenderer#getTableValidationStyleProperty()
	 */
	@Override
	protected VTTableValidationStyleProperty getTableValidationStyleProperty()
	{
		VTTableValidationStyleProperty styleProperty = super.getTableValidationStyleProperty();		
		styleProperty.setColumnWidth(1);		
		return styleProperty;
	}
}</template><template autoinsert="true" context="e4" deleted="false" description="angepasster Referencerenderer" enabled="true" name="EMF Reference NoAddButton">import javax.inject.Inject;

import org.eclipse.e4.core.di.annotations.Optional;
import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.e4.ui.di.UIEventTopic;
import org.eclipse.e4.ui.internal.workbench.E4Workbench;
import org.eclipse.e4.ui.model.application.MApplication;
import org.eclipse.e4.ui.workbench.IWorkbench;
import org.eclipse.emf.ecp.view.internal.control.multireference.MultiReferenceSWTRenderer;
import org.eclipse.emf.ecp.view.spi.context.ViewModelContext;
import org.eclipse.emf.ecp.view.spi.model.VControl;
import org.eclipse.emf.ecp.view.spi.renderer.NoPropertyDescriptorFoundExeption;
import org.eclipse.emf.ecp.view.spi.renderer.NoRendererFoundException;
import org.eclipse.emf.ecp.view.spi.util.swt.ImageRegistryService;
import org.eclipse.emf.ecp.view.template.model.VTViewTemplateProvider;
import org.eclipse.emfforms.spi.common.report.ReportService;
import org.eclipse.emfforms.spi.core.services.databinding.EMFFormsDatabinding;
import org.eclipse.emfforms.spi.core.services.label.EMFFormsLabelProvider;
import org.eclipse.emfforms.spi.swt.core.layout.SWTGridCell;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;

import it.naturtalent.e4.office.ui.OfficeUtils;
import it.naturtalent.office.model.address.Referenz;

public class ReferenzGruppeRenderer extends MultiReferenceSWTRenderer
{

	private IEventBroker eventBroker;
	
	private Button btnAddNew;
	
	@Inject
	public ReferenzGruppeRenderer(VControl vElement,
			ViewModelContext viewContext, ReportService reportService,
			EMFFormsDatabinding emfFormsDatabinding,
			EMFFormsLabelProvider emfFormsLabelProvider,
			VTViewTemplateProvider vtViewTemplateProvider,
			ImageRegistryService imageRegistryService)
	{
		super(vElement, viewContext, reportService, emfFormsDatabinding,
				emfFormsLabelProvider, vtViewTemplateProvider, imageRegistryService);
		
		MApplication currentApplication = E4Workbench.getServiceContext().get(IWorkbench.class).getApplication();
		eventBroker = currentApplication.getContext().get(IEventBroker.class);
		
	}

	@Override
	protected Control renderMultiReferenceControl(SWTGridCell cell,
			Composite parent)
			throws NoRendererFoundException, NoPropertyDescriptorFoundExeption
	{
		Control control = super.renderMultiReferenceControl(cell, parent);

		TableViewer tableViewer = getTableViewer();
		tableViewer.addSelectionChangedListener(new ISelectionChangedListener()
		{			
			@Override
			public void selectionChanged(SelectionChangedEvent event)
			{
				IStructuredSelection selection = ((IStructuredSelection) event.getSelection());
				Object selObj = selection.getFirstElement();
				if (selObj != null)
				{
					if (eventBroker != null)
						eventBroker.send(OfficeUtils.REFERENZGROUP_SELECTREFERENCEEVENT, selObj);					
				}
			}
		});
		
		return control;
	}
	
	@Inject 
	@Optional
	public void handleReferenceSelection(@UIEventTopic(OfficeUtils.REFERENZGROUP_REQUESTSELECTREFERENCEEVENT) Object reference )
	{
		if (reference instanceof Referenz)		
			getTableViewer().setSelection(new StructuredSelection(reference));
	}

	
	
	@Override
	protected boolean showAddExistingButton()
	{
		return false;
	}


	
}
</template></templates>